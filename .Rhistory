X <- rgamma(100, shape = 10 , rate = 2)
?seq
alphas <- seq(from = 1, to = 30, by = 0.5)
Ls<-1
?lapply
X <- rgamma(100, shape = 10 , rate = 2)
alphas <- seq(from = 1, to = 30, by = 0.5)
jointpdf <- function(alpha){
Ls <- 1
for(i in 1:100){
Ls <- Ls*dgamma(X[i] , shape= alpha , rate = 2)
}
return(Ls)
}
Likelihoods <- lapply(alphas, jointpdf)
loglike <- log(Likelihoods)
Likelihoods
for(i %in% alphas){
for(i in 1:length(alphas)){
Likelihoods[i] <- jointpdf(alphas[i])
}
loglike <- log(Likelihoods)
Likelihoods
jointpdf <- function(alpha){
Ls <- 1
for(i in 1:100){
Ls <- Ls*dgamma(X[i] , shape= alpha , rate = 2)
}
return(Ls)
}
jointpdf(10)
jointpdf <- function(alpha){
jointpdf <- function(alpha){
Ls <- 1
for(i in 1:100){
Ls <- Ls*dgamma(X[i] , shape= alpha , rate = 2)
}
return(as.double(Ls))
}
for(i in 1:length(alphas)){
Likelihoods[i] <- jointpdf(alphas[i])
}
s
}
jointpdf <- function(alpha){
Ls <- 1
for(i in 1:100){
Ls <- Ls*dgamma(X[i] , shape= alpha , rate = 2)
}
return(as.double(Ls))
}
for(i in 1:length(alphas)){
Likelihoods[i] <- jointpdf(alphas[i])
}
return(Ls)
jointpdf <- function(alpha){
Ls <- 1
for(i in 1:100){
Ls <- Ls*dgamma(X[i] , shape= alpha , rate = 2)
}
return(Ls)
}
for(i in 1:length(alphas)){
Likelihoods[i] <- jointpdf(alphas[i])
}
Likelihoods
Likelihoods
for(i in 1:length(alphas)){
likelihoods[i] <- jointpdf(alphas[i])
}
Likelihoods <- numeric(length(alphas))
for(i in 1:length(alphas)){
likelihoods[i] <- jointpdf(alphas[i])
}
likelihoods <- numeric(length(alphas))
for(i in 1:length(alphas)){
likelihoods[i] <- jointpdf(alphas[i])
}
loglike <- log(Likelihoods)
loglike
likelihoods
loglike <- log(likelihoods)
loglike
data(cars)
cars
head(cars)
y <- cars$dist
cbind(X,1)
X
X<- cbind(X,1)
Betas <- solve(t(X)%*%X)%*%t(X)%*%y
dim(t(X))
dim(X)
dim(solve(t(X)%*%X))
dim(y)
y <- cars$dist
y
dim(y)
length(y)
beta.mle <- solve(t(X) %*% X) %*% t(X) %*% y
beta.mle <- solve(t(X) %*% X) %*% t(X) %*% y
beta.mle <- solve(t(X) %*% X) %*% t(X)
X
length(y)
X
X <- cars$speed
dim(X)
X <- cars$speed
X<- cbind(X,1)
dim(X)
beta.mle <- solve(t(X) %*% X) %*% t(X) %*% y
beta.mle
library(pracma)
?psi
?pbinom()
GSS <- read.table("http://stat4ds.rwth-aachen.de/data/GSS2018.dat", header=T)
GSS
gender <- factor(GSS$SEX, levels=c(1,2), labels = c("Male","Female"))
gender
smallgap <- factor(GSS$SMALLGAP, levels=c(1:5), labels = c("strongly agree", "agree","neutral","disagree","strongly disagree"))
fairsociety <- table(gender,smallgap) # frequency table
fairsociety
?barplot
barplot(fairsociety)
income <- read.table("https://stat4ds.rwth-aachen.de/data/Income.dat")
income
head(income)
density(income$V1)
income <- income[2:,]
income <- income[2:6,]
income
income <- read.table("https://stat4ds.rwth-aachen.de/data/Income.dat")
income
income <- income[2:,]
income <- income[2:nrow(income),]
income
density(income$V1)
income$V1
density(as.integer(income$V1))
plot(density(as.integer(income$V1)) , type = "l")
mean(as.integer(income$V1))
min(as.integer(income$V1))
income$V1
?qqnorm
?optim
library(proportion)
install.packages("proportion")
library(rbinom)
install.packages("binom")
library(hinom)
library(binom)
?binom.confint
binom.confint(778,1497)
?binom.coverage
?binom.sim
?t.test
income
head(income)
summary(income)
unique(income$V3)
?boxplot
head(income)
income <- read.table("https://stat4ds.rwth-aachen.de/data/Income.dat")
head(income)
colnames(income) <- income[1,]
income <- income[-1,]
income
head(income)
boxplot(income$race ~ as.integer(income$income))
boxplot(as.integer(income$income)~income$race ~ )
boxplot(as.integer(income$income)~income$race )
white.income <- income$income[income$race == "W",]
white.income <- income$income[income$race == "W"]
white.income
white.income <- as.integer(income$income[income$race == "W"])
black.income <- as.integer(income$income[income$race == "B"])
?dt
t.test(white.income , black.income, var.equal = TRUE , conf.level = 90)
t.test(white.income , black.income, var.equal = TRUE , conf.level = 0.9)
length(white.income) + length(black.income) - 2
mean(white.income - black.income) + c(-1,1)*qnorm((1+0.9)/2)*sqrt(var(white.income - black.income))*sqrt(1/length(white.income) + 1/length(black.income))
library(mvtnorm)
## setting a seed to reproduce the same result
set.seed(123)
sigma <- matrix(c(4,2,2,3), ncol=2)
x <- rmvnorm(n=500, mean=c(0,0), sigma=sigma)
x
pca <- princomp(x)
pca$loadings
setwd("E:/")
setwd("E:/IITK/MTH209/209Project")
setwd("E:/IITK/MTH209/209Project")
happiness <- read.csv("Happiness_cleaned.csv")
suicides <- read.csv("suicide_cleaned.csv")
happiness
suicides
happiness$Year
unique(suicides$year)
unique(happiness$Year)
suicides <- suicides[suicides$year %in% c(2015,2016)]
suicides <- suicides[suicides$year %in% c(2015,2016)]
suicides$year
suicides$year %in% c(2015,2016)
suicides <- suicides[suicides$year %in% c(2015,2016)]
suicides <- suicides[suicides$year %in% c(2015,2016),]
happiness <- happiness[happiness$Year %in% c(2015,2016),]
suicides
happiness
suicides
